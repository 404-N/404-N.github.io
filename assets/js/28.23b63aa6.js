(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{595:function(t,s,e){"use strict";e.r(s);var v=e(10),i=Object(v.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"xss-cross-site-scripting-脚本攻击漏洞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#xss-cross-site-scripting-脚本攻击漏洞"}},[t._v("#")]),t._v(" XSS(Cross-Site Scripting)脚本攻击漏洞；")]),t._v(" "),e("p",[t._v("解决方法：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("输入过滤")]),t._v("，对输入的数据进行严格校验，诸如< script >、< img >、< a >等标签进行过滤")]),t._v(" "),e("li",[e("strong",[t._v("编码")]),t._v("，一些常见的符号，如<>在输入的时候要对其进行转换编码，这样做浏览器是不会对该标签进行解释执行的，同时也不影响显示效果")]),t._v(" "),e("li",[e("strong",[t._v("限制")]),t._v("。xss攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御")]),t._v(" "),e("li",[e("strong",[t._v("HttpOnly Cookie")]),t._v("，预防XSS攻击窃取用户cookie最有效的防御手段，在cookie中设置了HttpOnly属性")]),t._v(" "),e("li",[e("strong",[t._v("CSP")]),t._v("，原理其实就是白名单机制，开发者明确告诉客户端(浏览器)哪些资源可以加载并执行，我们只需要提供配置，其他的工作由客户端(浏览器)来完成。通过 < meta> 标签开启 < meta http-equiv=“Content-Security-Policy” content=“配置项” >")])]),t._v(" "),e("h3",{attrs:{id:"csrf-cross-sit-request-forgery-漏洞-跨站请求伪造"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#csrf-cross-sit-request-forgery-漏洞-跨站请求伪造"}},[t._v("#")]),t._v(" CSRF（Cross-sit request forgery）漏洞；跨站请求伪造")]),t._v(" "),e("p",[t._v("防止csrf常用方案如下：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("阻止不明外域的访问")]),t._v(" "),e("ul",[e("li",[t._v("同源检测")]),t._v(" "),e("li",[t._v("Samesite Cookie")])])]),t._v(" "),e("li",[e("p",[t._v("提交时要求附加本域才能获取的信息")]),t._v(" "),e("ul",[e("li",[t._v("CSRF Token")]),t._v(" "),e("li",[t._v("双重Cookie验证")])])]),t._v(" "),e("li",[e("p",[t._v("token这种形式，流程如下：")])]),t._v(" "),e("li",[e("ul",[e("li",[e("p",[t._v("用户打开页面的时候，服务器需要给这个用户生成一个Token")])]),t._v(" "),e("li",[e("p",[t._v("对于GET请求，Token将附在请求地址之后。对于 POST 请求来说，要在 form 的最后加上")]),t._v(" "),e("input",{attrs:{type:"hidden",name:"csrftoken",value:"tokenvalue"}})]),t._v(" "),e("li",[e("p",[t._v("当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性")])])])])]),t._v(" "),e("h3",{attrs:{id:"文件上传漏洞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件上传漏洞"}},[t._v("#")]),t._v(" 文件上传漏洞")]),t._v(" "),e("p",[t._v("解决方法：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("检查文件类型及后缀")])]),t._v(" "),e("li",[e("p",[t._v("定义上传文件类型白名单，即只允许白名单里面类型的文件上传")])]),t._v(" "),e("li",[e("p",[t._v("文件上传目录禁止执行脚本解析，避免攻击者进行二次攻击")])])])])}),[],!1,null,null,null);s.default=i.exports}}]);